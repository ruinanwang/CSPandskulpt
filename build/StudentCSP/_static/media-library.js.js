// Generated by CoffeeScript 1.12.4
(function() {
  var MediaLibrary, base64keyStr, decode64, escape,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MediaLibrary = (function() {
    function MediaLibrary(options) {
      if (options == null) {
        options = {};
      }
      this._filterLinkClicked = bind(this._filterLinkClicked, this);
      this._mediaLinkClicked = bind(this._mediaLinkClicked, this);
      this.filter_type = options.filter_type, this.mediaLinkClicked = options.mediaLinkClicked, this.canceled = options.canceled;
      this.filter_type || (this.filter_type = '*/*');
    }

    MediaLibrary.prototype.resetProgressBar = function() {
      return $('#media-progress .bar').css('width', '0%');
    };

    MediaLibrary.prototype.setProgressBar = function(e, data) {
      var progress;
      progress = parseInt(data.loaded / data.total * 100, 10);
      return $('#media-progress .bar').css('width', progress + "%");
    };

    MediaLibrary.prototype.showErrorMessage = function(errors) {
      var errorFile, j, len, msg;
      msg = '<p>Some files could not be saved because of errors:</p><ul>';
      for (j = 0, len = errors.length; j < len; j++) {
        errorFile = errors[j];
        msg += "<li>" + errorFile.file[0] + "</li>";
      }
      msg += '</ul>';
      return pythy.alert(msg);
    };

    MediaLibrary.prototype.start = function() {
      var _this;
      this.url = $('#media-upload').data('url');
      $('#media-upload').fileupload({
        url: this.url,
        dataType: 'json',
        done: (function(_this) {
          return function(e, data) {
            if (data.result.errors.length > 0) {
              _this.showErrorMessage(data.result.errors);
            }
            _this.refreshList();
            return _this.resetProgressBar();
          };
        })(this),
        progressall: this.setProgressBar
      });
      this.refreshList();
      _this = this;
      $('.media-area').on('click', 'a.media-link', function(e) {
        _this._mediaLinkClicked($(this));
        return e.preventDefault();
      });
      $('.filter-list').on('click', 'a', function(e) {
        _this._filterLinkClicked($(this));
        return e.preventDefault();
      });
      $('.media-area').on('click', 'a#open-media', function(e) {
        return _this.openLinkClicked(e, $(this));
      });
      return $(".filter-list a[data-type='" + this.filter_type + "']").closest('li').addClass('active');
    };

    MediaLibrary.prototype.showAsModal = function() {
      return $.ajax('/media', {
        dataType: 'script'
      }).complete((function(_this) {
        return function() {
          _this.start();
          return $('#media_library_modal').on('hidden', function() {
            if (!this.mediaLinkWasClicked && this.canceled) {
              return this.canceled();
            }
          });
        };
      })(this));
    };

    MediaLibrary.prototype._openPictureTool = function(url) {
      return window.pythy.pictureTool.show(url);
    };

    MediaLibrary.prototype._openSoundTool = function(url) {
      return window.pythy.soundTool.start(window.location.protocol + '//' + window.location.host + url);
    };

    MediaLibrary.prototype.openLinkClicked = function(e, link) {
      var href, type;
      href = link.attr('href');
      type = link.data('type');
      if (type.indexOf('image') > -1) {
        e.preventDefault();
        return this._openPictureTool(href);
      } else if (type.indexOf('audio') > -1) {
        e.preventDefault();
        return this._openSoundTool(href);
      }
    };

    MediaLibrary.prototype._mediaLinkClicked = function(link) {
      this.mediaLinkWasClicked = true;
      if (this.mediaLinkClicked) {
        return this.mediaLinkClicked(link);
      }
    };

    MediaLibrary.prototype._filterLinkClicked = function(link) {
      var li;
      $('.filter-list li').removeClass('active');
      li = link.closest('li');
      li.addClass('active');
      this.filter_type = li.children().data('type');
      return this.refreshList(link.data('type'));
    };

    MediaLibrary.prototype.refreshList = function(type) {
      var params;
      type || (type = this.filter_type);
      params = {
        type: type
      };
      return $.getJSON(this.url, params, (function(_this) {
        return function(data, status, xhr) {
          var item, j, len, list, ref, results, section, thumbs;
          list = $('#media-area');
          list.empty();
          if (data.user.length > 0) {
            section = $('<div id="media-section-user">').addClass('media-section').appendTo(list);
            $('<div>').addClass('section-title').text('Media that you have uploaded').appendTo(section);
            thumbs = $('<ul>').addClass('media-list').appendTo(section);
            ref = data.user;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              item = ref[j];
              results.push(_this._createThumbnail(item).appendTo(thumbs));
            }
            return results;
          }
        };
      })(this));
    };

    MediaLibrary.prototype._destroyLink = function(id) {
      return "<a href=\"/media/" + id + "\" class=\"btn btn-mini btn-danger\" data-remote=\"true\" data-method=\"delete\" rel=\"nofollow\">Delete</a>";
    };

    MediaLibrary.prototype._openLink = function(url, type) {
      return "<a href=\"" + url + "\" data-type=\"" + type + "\" class=\"btn btn-mini btn-success\" id=\"open-media\">Open</a>";
    };

    MediaLibrary.prototype._createThumbnail = function(item) {
      var link_end, link_start, node, thumb_link_start;
      if (item.thumbnail_class) {
        node = "<i class=\"media-object fa fa-" + item.thumbnail_class + "\"></i>";
      } else {
        node = "<img class=\"media-object\" width=\"64\" height=\"64\" src=\"" + item.thumbnail_url + "\"/>";
      }
      if (this.mediaLinkClicked) {
        thumb_link_start = "<a href=\"" + item.file.url + "\" class=\"media-link pull-left\">";
        link_start = "<a href=\"" + item.file.url + "\" class=\"media-link\">";
        link_end = '</a>';
      } else {
        link_start = thumb_link_start = link_end = '';
      }
      return $("<li class=\"media\">\n  " + thumb_link_start + node + link_end + "\n  <div class=\"media-body\">\n    <div class=\"media-heading\">\n      " + link_start + (escape(item.filename)) + link_end + "\n      <div class=\"media-actions pull-right\">\n        " + (this._openLink(item.file.url, item.content_type)) + "\n        " + (this._destroyLink(item.id)) + "\n      </div>\n    </div>\n    " + (escape(item.info_text)) + "\n  </div>\n</li>");
    };

    return MediaLibrary;

  })();

  escape = function(s) {
    return ('' + s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
  };

  base64keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  decode64 = function(input) {
    var base64test, chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, output;
    output = [];
    chr1 = "";
    chr2 = "";
    chr3 = "";
    enc1 = "";
    enc2 = "";
    enc3 = "";
    enc4 = "";
    i = 0;
    base64test = /[^A-Za-z0-9\+\/\=]/g;
    if (base64test.exec(input)) {
      console.log("There were invalid base64 characters in the input text.\n\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n'\nExpect errors in decoding.");
    }
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    while (true) {
      enc1 = base64keyStr.indexOf(input.charAt(i++));
      enc2 = base64keyStr.indexOf(input.charAt(i++));
      enc3 = base64keyStr.indexOf(input.charAt(i++));
      enc4 = base64keyStr.indexOf(input.charAt(i++));
      chr1 = (enc1 << 2) | (enc2 >> 4);
      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
      chr3 = ((enc3 & 3) << 6) | enc4;
      output.push(chr1);
      if (enc3 !== 64) {
        output.push(chr2);
      }
      if (enc4 !== 64) {
        output.push(chr3);
      }
      chr1 = chr2 = chr3 = "";
      enc1 = enc2 = enc3 = enc4 = "";
      if (i >= input.length) {
        break;
      }
    }
    return new Uint8Array(output);
  };

  window.pythy.showMediaModal = function(options) {
    var ml;
    ml = new MediaLibrary(options);
    window.pythy.mediaLibrary = ml;
    return ml.showAsModal();
  };

  window.pythy.uploadFileFromDataURL = function(filename, dataURL) {
    var blob, contentType, data, match;
    match = /data:([^;]+);base64,(.*)/.exec(dataURL);
    contentType = match[1];
    data = decode64(match[2]);
    blob = new Blob([data.buffer], {
      type: contentType,
      name: filename
    });
    return pythy.uploadFileFromBlob(filename, blob);
  };

  window.pythy.uploadFileFromBlob = function(filename, blob) {
    var uploader;
    uploader = $('<input type="file" name="files[]">');
    uploader.fileupload({
      url: '/media',
      dataType: 'json'
    });
    return uploader.fileupload('send', {
      files: [blob],
      formData: {
        'filenames[0]': filename
      }
    });
  };

}).call(this);

// Generated by CoffeeScript 1.12.4
(function() {
  var Line, Selection, SoundTool, Waveform;

  Line = (function() {
    function Line(canvasId, width, sound, nthSample1, channelNum) {
      this.width = width;
      this.sound = sound;
      this.nthSample = nthSample1;
      this.channelNum = channelNum;
      this.canvas = document.getElementById(canvasId);
      if (!this.canvas) {
        throw new Error('Could not find canvas');
      }
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = this.width;
      this.height = this.canvas.height;
      this.x = 0;
      this.sampleNumberEl = document.getElementById('sample-number');
      this.valueEl = document.getElementById('value');
    }

    Line.prototype.color = 'rgb(0, 255, 0)';

    Line.prototype.setX = function(x) {
      return this.x = x;
    };

    Line.prototype.getX = function() {
      return this.x;
    };

    Line.prototype.draw = function(x) {
      this.clear();
      this.setX(x);
      this.ctx.beginPath();
      this.ctx.strokeStyle = this.color;
      this.ctx.moveTo(x, 0);
      this.ctx.lineTo(x, this.height);
      this.ctx.stroke();
      return this.ctx.closePath();
    };

    Line.prototype.update = function(x) {
      var sampleNumber;
      if (x < 0 || x >= this.width) {
        return;
      }
      sampleNumber = x * this.nthSample;
      this.draw(x);
      this.sampleNumberEl.value = sampleNumber;
      return this.valueEl.innerText = pythy.Sound.mapFloatTo16BitInt(this.sound.getSample(this.channelNum, sampleNumber));
    };

    Line.prototype.getSampleNumber = function() {
      return this.x * this.nthSample;
    };

    Line.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.width, this.height);
    };

    return Line;

  })();

  Waveform = (function() {
    function Waveform(canvasId, width, sound, nthSample1, channelNum) {
      this.width = width;
      this.sound = sound;
      this.nthSample = nthSample1;
      this.channelNum = channelNum;
      this.canvas = document.getElementById(canvasId);
      if (!this.canvas) {
        throw new Error('Could not find canvas');
      }
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = this.width;
      this.height = this.canvas.height;
      this.animationStepSize = 5000;
      this._x = 0;
      this._i = 0;
    }

    Waveform.prototype.waveformColor = 'rgb(255, 255, 255)';

    Waveform.prototype.backgroundColor = 'rgb(0, 0, 0)';

    Waveform.prototype.axisColor = 'rgb(0, 255, 0)';

    Waveform.prototype.drawAxis = function() {
      this.ctx.beginPath();
      this.ctx.strokeStyle = this.axisColor;
      this.ctx.moveTo(0, this.height / 2);
      this.ctx.lineTo(this.width, this.height / 2);
      this.ctx.stroke();
      return this.ctx.closePath();
    };

    Waveform.prototype.drawBackground = function() {
      this.ctx.fillStyle = this.backgroundColor;
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    Waveform.prototype.animate = function() {
      var step;
      step = 0;
      if (this._x < this.width) {
        requestAnimationFrame(this.animate.bind(this));
        while (this._x < this.width && step < this.animationStepSize) {
          this.ctx.lineTo(this._x, (1 - this.sound.getSample(this.channelNum, this._i)) * this.height / 2);
          step++;
          this._x++;
          this._i += this.nthSample;
        }
        return this.ctx.stroke();
      } else {
        return this.ctx.closePath();
      }
    };

    Waveform.prototype.draw = function() {
      this.clear();
      this.drawBackground();
      this.drawAxis();
      this.ctx.beginPath();
      this.ctx.strokeStyle = this.waveformColor;
      this.ctx.moveTo(0, (this.sound.getSample(this.channelNum, 0) + 1) * this.height / 2);
      this._x = 0;
      this._i = 0;
      return this.animate();
    };

    Waveform.prototype.clear = function() {
      return this.ctx.clearRect(0, 0, this.width, this.height);
    };

    return Waveform;

  })();

  Selection = (function() {
    function Selection(canvasId, width, nthSample1) {
      this.width = width;
      this.nthSample = nthSample1;
      this.canvas = document.getElementById(canvasId);
      if (!this.canvas) {
        throw new Error('Could not find canvas');
      }
      this.ctx = this.canvas.getContext('2d');
      this.canvas.width = this.width;
      this.height = this.canvas.height;
      this.color = 'rgba(100, 100, 100, 0.4)';
      this.start = this.end = 0;
    }

    Selection.prototype.getStart = function() {
      return this.start * this.nthSample;
    };

    Selection.prototype.getEnd = function() {
      return this.end * this.nthSample;
    };

    Selection.prototype.clear = function() {
      this.start = 0;
      this.end = 0;
      return this.ctx.clearRect(0, 0, this.width, this.height);
    };

    Selection.prototype.draw = function(start, end) {
      this.clear();
      this.start = start;
      this.end = end;
      this.ctx.fillStyle = this.color;
      return this.ctx.fillRect(start, 0, end - start, this.height);
    };

    return Selection;

  })();

  SoundTool = (function() {
    function SoundTool(channelNum) {
      var canvases;
      this.channelNum = channelNum;
      this.playBtn = document.getElementById('play');
      this.playAfterBtn = document.getElementById('play-after');
      this.playBeforeBtn = document.getElementById('play-before');
      this.playSelectionBtn = document.getElementById('play-selection');
      this.clearSelectionBtn = document.getElementById('clear-selection');
      this.nextPixel = document.getElementById('next-pixel');
      this.previousPixel = document.getElementById('previous-pixel');
      this.lineToStart = document.getElementById('line-to-start');
      this.lineToEnd = document.getElementById('line-to-end');
      this.zoomValue = document.getElementById('zoom');
      this.stopBtn = document.getElementById('stop');
      this.container = document.getElementById('container');
      this.sampleNumberEl = document.getElementById('sample-number');
      this.zoomIn = document.getElementById('zoom-in');
      this.zoomOut = document.getElementById('zoom-out');
      this.widget = $('#mediacomp-soundtool');
      this.widget.modal({
        backdrop: false,
        keyboard: true,
        show: false
      });
      this.widget.draggable({
        handle: '.modal-header'
      });
      canvases = document.getElementsByTagName('canvas');
      this.topCanvas = canvases[canvases.length - 1];
      this.eventHandlers = [
        {
          element: this.playSelectionBtn,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.sound.playSelection(_this.getStartSelection(), _this.getEndSelection());
            };
          })(this)
        }, {
          element: this.clearSelectionBtn,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.clearSelection();
            };
          })(this)
        }, {
          element: this.nextPixel,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.moveLine(1);
            };
          })(this)
        }, {
          element: this.previousPixel,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.moveLine(-1);
            };
          })(this)
        }, {
          element: this.lineToStart,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.moveLineToStart();
            };
          })(this)
        }, {
          element: this.lineToEnd,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.moveLineToEnd();
            };
          })(this)
        }, {
          element: this.playBtn,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.sound.play();
            };
          })(this)
        }, {
          element: this.playAfterBtn,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.sound.playAfter(_this.getSelectionTime());
            };
          })(this)
        }, {
          element: this.playBeforeBtn,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.sound.playBefore(_this.getSelectionTime());
            };
          })(this)
        }, {
          element: this.stopBtn,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.sound.stop();
            };
          })(this)
        }, {
          element: this.zoomValue,
          evt: 'keyup',
          handler: (function(_this) {
            return function(evt) {
              if (evt.keyCode === 13) {
                return _this.start(_this.url, parseInt(_this.zoomValue.value));
              }
            };
          })(this)
        }, {
          element: this.zoomIn,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.start(_this.url, 1);
            };
          })(this)
        }, {
          element: this.zoomOut,
          evt: 'click',
          handler: (function(_this) {
            return function() {
              return _this.start(_this.url);
            };
          })(this)
        }, {
          element: this.sampleNumberEl,
          evt: 'keyup',
          handler: (function(_this) {
            return function(evt) {
              if (evt.keyCode !== 13) {
                return;
              }
              _this.line.update(parseInt(_this.sampleNumberEl.value / parseInt(_this.zoomValue.value)));
              return _this.scrollToPosition();
            };
          })(this)
        }, {
          element: this.topCanvas,
          evt: 'mousedown',
          handler: (function(_this) {
            return function(evt) {
              _this._startClick = evt.timeStamp;
              return _this._selectionStart = _this.getActualX(evt);
            };
          })(this)
        }, {
          element: this.topCanvas,
          evt: 'mouseup',
          handler: (function(_this) {
            return function(evt) {
              if (evt.timeStamp - _this._startClick <= 200) {
                return _this.line.update(_this.getActualX(evt));
              } else {
                _this._selectionEnd = _this.getActualX(evt);
                return _this.selection.draw(_this._selectionStart, _this._selectionEnd);
              }
            };
          })(this)
        }
      ];
    }

    SoundTool.prototype.getActualX = function(evt) {
      return (evt.x || evt.clientX) + this.container.scrollLeft - this.container.offsetLeft - this.widget[0].offsetLeft;
    };

    SoundTool.prototype._onLoad = function(nthSample) {
      this.widget.modal('show');
      this.detachEventHandlers();
      if (!nthSample) {
        nthSample = parseInt(this.sound.getLength() / this.container.clientWidth);
      }
      this.width = this.sound.getLength() / nthSample;
      this.zoomValue.value = nthSample;
      this.waveform = new Waveform('waveform', this.width, this.sound, nthSample, this.channelNum);
      this.waveform.draw();
      this.line = new Line('line-overlay', this.width, this.sound, nthSample, this.channelNum);
      this.line.update(0);
      this.selection = new Selection('selection', this.width, nthSample);
      return this.attachEventHandlers();
    };

    SoundTool.prototype.start = function(arg, nthSample) {
      if (arg instanceof pythy.Sound) {
        this.sound = arg;
        this.url = this.sound.getUrl();
        return this._onLoad(nthSample);
      } else {
        this.url = arg;
        return this.sound = new pythy.Sound(((function(_this) {
          return function() {
            return _this._onLoad(nthSample);
          };
        })(this)), null, this.url);
      }
    };

    SoundTool.prototype.detachEventHandlers = function() {
      var evtHldr, i, len, ref, results;
      ref = this.eventHandlers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        evtHldr = ref[i];
        results.push(evtHldr.element.removeEventListener(evtHldr.evt, evtHldr.handler));
      }
      return results;
    };

    SoundTool.prototype.attachEventHandlers = function() {
      var evtHldr, i, len, ref, results;
      ref = this.eventHandlers;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        evtHldr = ref[i];
        results.push(evtHldr.element.addEventListener(evtHldr.evt, evtHldr.handler));
      }
      return results;
    };

    SoundTool.prototype.scrollToPosition = function() {
      return this.container.scrollLeft = this.line.getX() - this.container.clientWidth / 2;
    };

    SoundTool.prototype.moveLine = function(direction) {
      return this.line.update(this.line.getX() + direction);
    };

    SoundTool.prototype.moveLineToStart = function() {
      this.line.update(0);
      return this.scrollToPosition();
    };

    SoundTool.prototype.moveLineToEnd = function() {
      this.line.update(this.width - 1);
      return this.scrollToPosition();
    };

    SoundTool.prototype.getSelectionTime = function() {
      return this.line.getSampleNumber() * this.sound.getDuration() / this.sound.getLength();
    };

    SoundTool.prototype.getStartSelection = function() {
      return this.selection.getStart() * this.sound.getDuration() / this.sound.getLength();
    };

    SoundTool.prototype.getEndSelection = function() {
      return this.selection.getEnd() * this.sound.getDuration() / this.sound.getLength();
    };

    SoundTool.prototype.clearSelection = function() {
      return this.selection.clear();
    };

    SoundTool.prototype.hide = function() {
      return this.widget.modal('hide');
    };

    return SoundTool;

  })();

  window.addEventListener('load', function() {
    return window.pythy.soundTool = new SoundTool(0);
  });

}).call(this);

// Generated by CoffeeScript 1.12.4
(function() {
  var Statistics;

  window.pythy = {
    url_part_safe: function(value) {
      return value.toLowerCase().replace(/[^a-zA-Z0-9]+/g, '-').replace(/-+$/g, '');
    },
    alert: function(message, options) {
      var header, okText, ref;
      if (options == null) {
        options = {};
      }
      okText = (ref = options.okText) != null ? ref : 'OK';
      header = options.title ? "<div class=\"modal-header\">\n  <a class=\"close\" data-dismiss=\"modal\">&times;</a>\n  <h3>" + options.title + "</h3>\n</div>" : '';
      $('body').append("<div id=\"pythy-alert-modal\" class=\"modal hide fade\">\n  " + header + "\n  <div class=\"modal-body\">\n    <p>" + message + "</p>\n  </div>\n  <div class=\"modal-footer\">\n    <a href=\"#\" class=\"btn btn-primary\" data-dismiss=\"modal\">" + okText + "</a>\n  </div>\n</div>");
      return $('#pythy-alert-modal').modal().on('hidden', function() {
        return $('#pythy-alert-modal').remove();
      });
    },
    confirm: function(message, options) {
      var header, noText, ref, ref1, ref2, yesClass, yesText;
      if (options == null) {
        options = {};
      }
      yesText = (ref = options.yesText) != null ? ref : 'Yes';
      noText = (ref1 = options.noText) != null ? ref1 : 'No';
      yesClass = (ref2 = options.yesClass) != null ? ref2 : 'btn-primary';
      header = options.title ? "<div class=\"modal-header\">\n  <a class=\"close\" data-dismiss=\"modal\">&times;</a>\n  <h3>" + options.title + "</h3>\n</div>" : '';
      $('body').append("<div id=\"pythy-confirm-modal\" class=\"modal hide fade\">\n  " + header + "\n  <div class=\"modal-body\">\n    <p>" + message + "</p>\n  </div>\n  <div class=\"modal-footer\">\n    <a href=\"#\" class=\"btn\" data-dismiss=\"modal\">\n      " + noText + "\n    </a>\n    <a href=\"#\" id=\"pythy-confirm-yes\" class=\"btn " + yesClass + "\" data-dismiss=\"modal\">\n      " + yesText + "\n    </a>\n  </div>\n</div>");
      $('#pythy-confirm-modal').modal().on('hidden', function() {
        return $('#pythy-confirm-modal').remove();
      });
      return $('#pythy-confirm-yes').click(function(e) {
        return options.onYes();
      });
    },
    percentage: function(value) {
      return (Math.round(value * 100) / 100) + "%";
    },
    appendLoaderTo: function(selector) {
      return selector.append($('<div>').addClass('loading-widget').append($('<i>').addClass('fa-spinner fa-spin')));
    }
  };

  Statistics = (function() {
    function Statistics(array) {
      this.array = array;
      this.array.sort();
    }

    Statistics.prototype.minimum = function() {
      if (this.array.length === 0) {
        return 0.0;
      } else {
        return this.array[0];
      }
    };

    Statistics.prototype.maximum = function() {
      if (this.array.length === 0) {
        return 0.0;
      } else {
        return this.array[this.array.length - 1];
      }
    };

    Statistics.prototype.mean = function() {
      if (this.array.length === 0) {
        return 0.0;
      } else {
        return (this.array.reduce(function(a, b) {
          return a + b;
        })) / this.array.length;
      }
    };

    Statistics.prototype.median = function() {
      if (this.array.length === 0) {
        return 0.0;
      } else if (this.array.length % 2 === 0) {
        return (this.array[this.array.length / 2 - 1] + this.array[this.array.length / 2]) / 2;
      } else {
        return this.array[(this.array.length - 1) / 2];
      }
    };

    return Statistics;

  })();

  window.pythy.Statistics = Statistics;

  window.pythy.juggernaut = function() {
    var juggernaut;
    if (window.location.protocol === 'https:') {
      juggernaut = new Juggernaut({
        protocol: 'https',
        port: '8080',
        secure: true,
        host: window.location.hostname
      });
    } else {
      juggernaut = new Juggernaut({
        protocol: 'http',
        port: '8080',
        secure: false,
        host: window.location.hostname
      });
    }
    $.ajaxSetup({
      beforeSend: (function(_this) {
        return function(xhr) {
          return xhr.setRequestHeader("X-Session-ID", juggernaut.sessionID);
        };
      })(this)
    });
    return juggernaut;
  };
}).call(this);

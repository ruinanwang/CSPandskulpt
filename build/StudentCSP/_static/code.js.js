// Generated by CoffeeScript 1.12.4
(function() {
  var CodeController, InteractiveConsole,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  CodeController = (function() {
    function CodeController(opts) {
      this._mcCustomizeMediaURL = bind(this._mcCustomizeMediaURL, this);
      this._handleException = bind(this._handleException, this);
      this._runCode = bind(this._runCode, this);
      this._sendChangeRequest = bind(this._sendChangeRequest, this);
      this._hashChange = bind(this._hashChange, this);
      this._checkCode = bind(this._checkCode, this);
      this._resync = bind(this._resync, this);
      this._insertHrefIntoCode = bind(this._insertHrefIntoCode, this);
      this._openMediaLibrary = bind(this._openMediaLibrary, this);
      this._loadNextHistoryPage = bind(this._loadNextHistoryPage, this);
      var $codearea;
      $codearea = opts.$codearea, this.workspace = opts.workspace;
      opts.codeController = this;
      this.console = new InteractiveConsole(opts);
      this._initializeData($codearea);
      this._setupDateShim();
      this._createCodeMirrorWidget($codearea);
      this._initializeSkulpt();
      this._setLoading();
      this._registerEventHandlers();
      this._loadNextHistoryPage();
      this._subscribe();
      this._updateHistorySelection(window.location.hash);
      this._setupPeriodPing();
      this.supportsLocalStorage = typeof Storage !== "undefined";
      if (this.isEditor) {
        this._trackChangesWithSaving();
      } else {
        this._trackChanges();
      }
      if ($codearea.data('needs-environment')) {
        this._sendMessage({
          data: {
            message: 'prompt_for_environment'
          }
        });
      }
    }

    CodeController.prototype._setupPeriodPing = function() {
      return this.periodicPingTimer = setInterval((function(_this) {
        return function() {
          return _this._sendMessage({
            data: {
              message: 'ping'
            }
          });
        };
      })(this), (4 * 60 + 55) * 1000);
    };

    CodeController.prototype._initializeData = function($codearea) {
      this.channel = $codearea.data('channel');
      this.isEditor = $codearea.data('editor');
      this.mediaKey = $codearea.data('user-media-key');
      this.localStoragePath = $codearea.data('user-email') + $codearea.data('path');
      this.updated_at = parseInt($codearea.data('updated-at'));
      this.ignoreChange = false;
      this.ignoreNextHashChange = false;
      this.runButton = $('#run');
      return this.consoleSpinnerElement = $('#console-spinner');
    };

    CodeController.prototype._setupDateShim = function() {
      if (!Date.now) {
        return Date.now = function() {
          return new Date().getTime();
        };
      }
    };

    CodeController.prototype._setLoading = function() {
      return $('#check').data('loading-text', '<i class="fa fa-spinner fa-spin"></i>');
    };

    CodeController.prototype._createCodeMirrorWidget = function($codearea) {
      this.codeArea = CodeMirror.fromTextArea($codearea[0], {
        mode: {
          name: "python",
          version: 3,
          singleLineStringErrors: false
        },
        lineNumbers: true,
        gutters: ["CodeMirror-linenumbers"],
        indentUnit: 2,
        tabSize: 2,
        indentWithTabs: false,
        matchBrackets: true,
        extraKeys: {
          Tab: function(cm) {
            return cm.replaceSelection('  ', 'end');
          }
        }
      });
      return this._registerCodeAreaEventHandlers();
    };

    CodeController.prototype._registerCodeAreaEventHandlers = function() {
      this.codeArea.on('cursorActivity', (function(_this) {
        return function() {
          var cur;
          cur = _this.codeArea.getLineHandle(_this.codeArea.getCursor().line);
          if (cur === _this.hlLine) {
            return;
          }
          if (_this.hlLine) {
            _this.codeArea.removeLineClass(_this.hlLine, 'background', 'active-line');
          }
          return _this.hlLine = _this.codeArea.addLineClass(cur, 'background', 'active-line');
        };
      })(this));
      return this.codeArea.on('blur', (function(_this) {
        return function() {
          if (_this.hlLine) {
            return _this.codeArea.removeLineClass(_this.hlLine, 'background', 'active-line');
          }
        };
      })(this));
    };

    CodeController.prototype._registerEventHandlers = function() {
      $('#run').click(this._runCode);
      $('#sync').click(this._resync);
      $('#check').click(this._checkCode);
      $('#media').click(this._openMediaLibrary);
      $('#change-environment').click((function(_this) {
        return function(e) {
          return _this._sendMessage({
            data: {
              message: 'prompt_for_environment'
            }
          });
        };
      })(this));
      $(window).hashchange(this._hashChange);
      $('#history-table .next-page').appear();
      return $(document.body).on('appear', '#history-table .next-page', this._loadNextHistoryPage);
    };

    CodeController.prototype._loadNextHistoryPage = function() {
      var skip;
      if (this.loading) {
        return this.pendingHistoryLoad = true;
      } else {
        this.loading = true;
        $('#history-table .next-page i').addClass('fa-spin');
        skip = $('#history-table tbody tr').length;
        return this._sendMessage({
          data: {
            message: 'history',
            start: skip
          }
        });
      }
    };

    CodeController.prototype._isQuote = function(ch) {
      return ch === '"' || ch === "'";
    };

    CodeController.prototype._openMediaLibrary = function() {
      return window.pythy.showMediaModal({
        mediaLinkClicked: this._insertHrefIntoCode
      });
    };

    CodeController.prototype._insertHrefIntoCode = function(link) {
      var after, before, charAfter, charBefore, clientHost, cursor, url;
      clientHost = window.location.protocol + "//" + window.location.host;
      url = $(link).attr('href');
      if (url[0] === '/') {
        url = clientHost + url;
      }
      cursor = this.codeArea.getCursor();
      if (this.codeArea.somethingSelected()) {
        this.codeArea.replaceSelection(url);
      } else {
        before = {
          line: cursor.line,
          ch: cursor.ch - 1
        };
        after = {
          line: cursor.line,
          ch: cursor.ch + 1
        };
        if (before.ch >= 0) {
          charBefore = this.codeArea.getRange(before, cursor);
          charAfter = this.codeArea.getRange(cursor, after);
          if (charBefore === charAfter && this._isQuote(charBefore)) {
            this.codeArea.replaceSelection("" + url);
          } else if (this._isQuote(charBefore)) {
            this.codeArea.replaceSelection("" + url + charBefore);
          } else {
            this.codeArea.replaceSelection("'" + url + "'");
          }
        } else {
          this.codeArea.replaceSelection("'" + url + "'");
        }
      }
      $('#media_library_modal').modal('hide');
      return this.codeArea.focus();
    };

    CodeController.prototype._sendMessage = function(settings) {
      settings.url = window.location.href;
      settings.type || (settings.type = 'post');
      return $.ajax(settings);
    };

    CodeController.prototype._trackChangesWithSaving = function() {
      var timerHandle;
      timerHandle = null;
      this.codeArea.on('change', (function(_this) {
        return function(_editor, change) {
          if (!_this.ignoreChange) {
            $('#check').attr('disabled', 'disabled');
            $('#save-state-icon').html('<i class="fa fa-ban"></i>');
            $('#save-state-message').html('wait');
            if (timerHandle) {
              clearTimeout(timerHandle);
            }
            return timerHandle = setTimeout(_this._sendChangeRequest, 5000);
          }
        };
      })(this));
      return this._removeUserAtTheEnd();
    };

    CodeController.prototype._removeUserAtTheEnd = function() {
      return window.onbeforeunload = (function(_this) {
        return function(e) {
          _this._sendMessage({
            async: false,
            data: {
              message: 'remove_user'
            }
          });
          return null;
        };
      })(this);
    };

    CodeController.prototype._trackChanges = function() {
      this.codeArea.on('change', (function(_this) {
        return function(_editor, change) {
          if (!_this.desynched && !_this.ignoreChange) {
            _this.desynched = true;
            _this._unsubscribeFromCode();
            _this._sendMessage({
              data: {
                message: 'unsync'
              }
            });
            $('#sync-button-group').fadeIn('fast');
            $('#sync').tooltip('show');
            return setTimeout((function() {
              return $('#sync').tooltip('hide');
            }), 8000);
          }
        };
      })(this));
      return this._removeUserAtTheEnd();
    };

    CodeController.prototype._resync = function() {
      this.desynched = false;
      $('#sync-button-group').fadeOut('fast');
      $('#sync').tooltip('hide');
      this._subscribeToCode();
      return this._sendMessage({
        data: {
          message: 'resync'
        }
      });
    };

    CodeController.prototype._checkCode = function() {
      if (!$('#check').attr('disabled')) {
        $('#check').tooltip('hide');
        $('#check').button('loading');
        return this._sendMessage({
          data: {
            message: 'check'
          }
        });
      }
    };

    CodeController.prototype.setPreamble = function(preamble) {
      this.preamble = preamble;
      return this.preambleLines = this.preamble.split('\n').length - 1;
    };

    CodeController.prototype.updateCode = function(code, force, newHistoryRow, amend, initial) {
      var loadFromLocal, localTimestamp;
      if (initial == null) {
        initial = false;
      }
      if (force || !force && !this.desynched) {
        this.ignoreChange = true;
        loadFromLocal = false;
        if (this.supportsLocalStorage) {
          localTimestamp = window.localStorage[this.localStoragePath + '-timestamp'];
          if (localTimestamp) {
            localTimestamp = parseInt(localTimestamp);
          }
          if (initial && localTimestamp && localTimestamp > this.updated_at) {
            loadFromLocal = true;
            code = window.localStorage[this.localStoragePath];
            $('#save-state-icon').html('<i class="fa fa-warning"></i>');
            $('#save-state-message').html('local');
            window.localStorage.removeItem(this.localStoragePath + '-timestamp');
            window.localStorage.removeItem(this.localStoragePath);
          }
        }
        this.codeArea.setValue(code);
        this.ignoreChange = false;
        if (loadFromLocal) {
          this._sendChangeRequest();
        }
      }
      if (newHistoryRow) {
        this.updateHistory(newHistoryRow, amend);
      }
      clearTimeout(this.overlayDelay);
      this.overlayDelay = null;
      return $('#code-loading-overlay').fadeOut({
        duration: 50
      });
    };

    CodeController.prototype.nextHistoryPageLoaded = function() {
      $('#history-table .next-page i').removeClass('fa-spin');
      this.loading = false;
      if (this.pendingHistoryLoad) {
        return this._loadNextHistoryPage();
      }
    };

    CodeController.prototype.updateHistory = function(newHistoryRow, amend) {
      var row;
      row = $(newHistoryRow);
      if (amend) {
        $('#history-table tbody tr:first-child').replaceWith(row);
      } else {
        row.hide().prependTo('#history-table tbody').fadeIn();
      }
      this.ignoreNextHashChange = true;
      window.location.hash = '';
      return this._updateHistorySelection();
    };

    CodeController.prototype._jugMessageHandler = function(self) {
      return function(data) {
        if (data.javascript) {
          return eval(data.javascript);
        } else if (data.message) {
          return self._sendMessage({
            data: data
          });
        }
      };
    };

    CodeController.prototype._subscribe = function() {
      var data;
      this.jug = window.pythy.juggernaut();
      this._subscribeToCode();
      if (this.isEditor) {
        this.jug.subscribe(this.channel + "_users", this._jugMessageHandler(this));
        this.jug.subscribe(this.channel + "_results", this._jugMessageHandler(this));
      }
      data = {
        message: 'add_user'
      };
      if (window.location.hash) {
        data.sha = unescape(window.location.hash.substring(1));
      }
      return this._sendMessage({
        data: data
      });
    };

    CodeController.prototype._hashChange = function() {
      var data;
      if (this.ignoreNextHashChange) {
        return this.ignoreNextHashChange = false;
      } else {
        this.overlayDelay = setTimeout(function() {
          return $('#code-loading-overlay').fadeIn();
        }, 250);
        data = {
          message: 'hash_change'
        };
        if (window.location.hash && window.location.hash.length > 0) {
          data.sha = unescape(window.location.hash.substring(1));
        }
        this._sendMessage({
          data: data
        });
        return this._updateHistorySelection(data.sha);
      }
    };

    CodeController.prototype._updateHistorySelection = function(sha) {
      if (sha && sha[0] === '#') {
        sha = sha.slice(1);
      }
      $("#history-table tr.info").removeClass('info');
      if (sha) {
        return $("#history-table a[href='#" + sha + "']").closest('tr').addClass('info');
      } else {
        $("#history-table tr:first-child").addClass('info');
        return $('#history-table').animate({
          scrollTop: 0
        }, 100);
      }
    };

    CodeController.prototype._subscribeToCode = function() {
      return this.jug.subscribe(this.channel + "_code", this._jugMessageHandler(this));
    };

    CodeController.prototype._unsubscribeFromCode = function() {
      return this.jug.unsubscribe(this.channel + "_code");
    };

    CodeController.prototype._sendChangeRequest = function() {
      var codeValueToSave;
      codeValueToSave = this.codeArea.getValue();
      $.ajax({
        type: 'PUT',
        url: window.location.href,
        timeout: 8000,
        data: {
          code: codeValueToSave,
          timestamp: Math.round({
            timestamp: Date.now() / 1000
          })
        },
        error: function(xmlhttprequest, status, message) {
          return this._saveAjaxError(xmlhttprequest, status, message, codeValueToSave);
        },
        context: this
      });
      $('#save-state-icon').html('<i class="fa fa-spinner fa-spin"></i>');
      return $('#save-state-message').html('saving');
    };

    CodeController.prototype._saveAjaxError = function(xmlhttprequest, status, message, codeValueToSave) {
      xmlhttprequest.abort();
      if (this.supportsLocalStorage) {
        window.localStorage[this.localStoragePath + '-timestamp'] = Math.round(Date.now() / 1000);
        window.localStorage[this.localStoragePath] = codeValueToSave;
        $('#save-state-icon').html('<i class="fa fa-warning"></i>');
        return $('#save-state-message').html('local');
      } else {
        $('#save-state-icon').html('<i class="fa fa-times"></i>');
        return $('#save-state-message').html('unsaved');
      }
    };

    CodeController.prototype._setRunButtonState = function(start) {
      if (start) {
        this.runButton.removeClass('btn-success').addClass('btn-danger').data('running', true).html('<i class="fa fa-spinner fa-lg fa-spin"></i>');
        return this.consoleSpinnerElement.show();
      } else {
        this.runButton.removeClass('btn-danger').addClass('btn-success').data('running', false).html('<i class="fa fa-play"></i>');
        return this.consoleSpinnerElement.hide();
      }
    };

    CodeController.prototype.isRunning = function() {
      return $('#run').data('running');
    };

    CodeController.prototype._runCode = function() {
      var code, starter, success;
      if (this.isRunning()) {
        this.console.terminate();
        return this._cleanup();
      } else {
        Sk.reset();
        this._setRunButtonState(true);
        this._clearErrors();
        this.console.clear();
        code = this.preamble + this.codeArea.getValue();
        starter = function() {
          return Sk.importMainWithBody("<stdin>", false, code);
        };
        success = (function(_this) {
          return function() {
            _this.console.success();
            return _this._cleanup();
          };
        })(this);
        return Sk.runInBrowser(starter, success, this._handleException);
      }
    };

    CodeController.prototype._cleanup = function() {
      Sk.cancelInBrowser();
      Sk.reset();
      return this._setRunButtonState(false);
    };

    CodeController.prototype._clearErrors = function() {
      var ref;
      return (ref = this.lastErrorWidget) != null ? ref.clear() : void 0;
    };

    CodeController.prototype._handleError = function(error) {
      if (error.start) {
        error.start.line -= this.preambleLines;
      }
      if (error.end) {
        error.end.line -= this.preambleLines;
      }
      this.console.error(error);
      return this._doNotTriggerChange((function(_this) {
        return function() {
          var end, message, start, type, widget;
          message = error.message, type = error.type;
          if (error.start) {
            error.end || (error.end = error.start);
            if (error.start.line === error.end.line && error.start.ch === error.end.ch) {
              error.end.ch++;
            }
            start = {
              line: error.start.line - 1,
              ch: error.start.ch
            };
            end = {
              line: error.end.line - 1,
              ch: error.end.ch
            };
            widget = $('<div class="error-widget"></div>');
            widget.text("Error: " + error.message);
            _this.lastErrorWidget = _this.codeArea.addLineWidget(start.line, widget[0]);
            _this.codeArea.setCursor(start.line, start.ch);
            return _this.codeArea.focus();
          }
        };
      })(this));
    };

    CodeController.prototype._doNotTriggerChange = function(func) {
      this.ignoreChange = true;
      func();
      return this.ignoreChange = false;
    };

    CodeController.prototype._handleException = function(e) {
      var errorInfo;
      if (e.tp$name) {
        errorInfo = {
          type: e.tp$name,
          message: e.args.v[0].v
        };
        if (e.args.v.length > 3) {
          if (typeof e.args.v[3] === 'number') {
            errorInfo.start = {
              line: e.args.v[3],
              ch: e.args.v[4]
            };
          } else {
            errorInfo.start = {
              line: e.args.v[3][0][0],
              ch: e.args.v[3][0][1]
            };
            errorInfo.end = {
              line: e.args.v[3][1][0],
              ch: e.args.v[3][1][1]
            };
          }
        } else {
          errorInfo.start = {
            line: Sk.currLineNo,
            ch: Sk.currColNo
          };
        }
      } else {
        errorInfo = {
          type: 'Internal error (' + e.name + ')',
          message: e.message
        };
      }
      this._handleError(errorInfo);
      return this._cleanup();
    };

    CodeController.prototype._initializeSkulpt = function() {
      Sk.configure({
        output: this.console.output,
        inputfun: (function(_this) {
          return function(prompt) {
            return Sk.future(function(continueWith) {
              return _this.console.promptForInput(prompt, continueWith);
            });
          };
        })(this),
        read: this._skRead,
        transformUrl: CodeController.transformUrl
      });
      return window.mediaffi = {
        customizeMediaURL: this._mcCustomizeMediaURL,
        writePictureTo: this._mcWritePictureTo
      };
    };

    CodeController.prototype._skRead = function(file) {
      if (!Sk.builtinFiles || !Sk.builtinFiles['files'][file]) {
        throw "File not found: '" + file + "'";
      } else {
        return Sk.builtinFiles['files'][file];
      }
    };

    CodeController.transformUrl = function(url) {
      var clientHost, encodedUrl, host, protocol, ref;
      encodedUrl = encodeURIComponent(url);
      clientHost = window.location.protocol + "//" + window.location.host;
      ref = window.location, protocol = ref.protocol, host = ref.host;
      if (url.indexOf(clientHost) === 0) {
        return url;
      } else {
        return protocol + "//" + host + "/proxy?url=" + encodedUrl;
      }
    };

    CodeController.prototype._mcWritePictureTo = function(dataURL, path, continueWith) {
      return window.pythy.uploadFileFromDataURL(path, dataURL).done(function(e, data) {
        return continueWith(e);
      });
    };

    CodeController.prototype._mcCustomizeMediaURL = function(url) {
      var host, protocol, ref;
      ref = window.location, protocol = ref.protocol, host = ref.host;
      if (/^https?:\/\//.test(url)) {
        return url;
      } else {
        return protocol + "//" + host + "/m/u/" + this.mediaKey + "/" + url;
      }
    };

    return CodeController;

  })();

  InteractiveConsole = (function() {
    function InteractiveConsole(opts) {
      this.output = bind(this.output, this);
      this.stopDrag = bind(this.stopDrag, this);
      this.initDrag = bind(this.initDrag, this);
      this.drag = bind(this.drag, this);
      var onInput;
      this.codeController = opts.codeController, this.console_content = opts.console_content, this.resizeBar = opts.resizeBar, this.consoleWrapper = opts.consoleWrapper, onInput = opts.onInput;
      this.visible = false;
      this._registerEventHandlers();
      this.inputField = $('<input type="text" class="input-xlarge" placeholder=" Type something..."/>');
      this._createNewLine();
      $('#console-spinner').hide();
      $(window).resize((function(_this) {
        return function() {
          return $("#code-area").css({
            bottom: _this.consoleWrapper.height() + _this.resizeBar.height()
          });
        };
      })(this));
    }

    InteractiveConsole.prototype._registerEventHandlers = function() {
      this.resizeBar.mousedown(this.initDrag);
      return this.codeController.workspace.mouseup(this.stopDrag);
    };

    InteractiveConsole.prototype.drag = function(e) {
      this.consoleWrapper.height(this.consoleInitDragHeight + this.initDragY - e.pageY);
      this.resizeBar.css({
        bottom: this.consoleWrapper.height()
      });
      return this.codearea.css({
        bottom: this.consoleWrapper.height() + this.resizeBar.height()
      });
    };

    InteractiveConsole.prototype.initDrag = function(e) {
      this.codeController.workspace.disableSelection();
      this.consoleInitDragHeight = this.consoleWrapper.height();
      this.codearea = $("#code-area");
      this.codeareaInitDragHeight = this.codearea.height();
      this.initDragY = e.pageY;
      return this.codeController.workspace.bind("mousemove", this.drag);
    };

    InteractiveConsole.prototype.stopDrag = function(e) {
      this.codeController.workspace.unbind("mousemove");
      return this.codeController.workspace.enableSelection();
    };

    InteractiveConsole.prototype.clear = function() {
      this.console_content.empty();
      return this._createNewLine();
    };

    InteractiveConsole.prototype.output = function(text) {
      var firstLine, i, len, line, lines, results;
      lines = text.split('\n');
      firstLine = lines.shift();
      this._addToCurrentLine(firstLine);
      results = [];
      for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        this._createNewLine();
        results.push(this._addToCurrentLine(line));
      }
      return results;
    };

    InteractiveConsole.prototype.error = function(error) {
      this._createNewLine('text-error');
      if (error.start) {
        return this._addToCurrentLine("Your program ended prematurely because the following error\noccurred on line " + error.start.line + ": " + error.message);
      } else {
        return this._addToCurrentLine("Your program ended prematurely because the following error\noccurred: " + error.message);
      }
    };

    InteractiveConsole.prototype.success = function() {
      this._createNewLine('text-success');
      return this._addToCurrentLine("Your program finished successfully.");
    };

    InteractiveConsole.prototype.terminate = function() {
      this.inputField.remove();
      this._createNewLine('text-warning');
      return this._addToCurrentLine("You manually ended your program.");
    };

    InteractiveConsole.prototype.promptForInput = function(prompt, callback) {
      this._addToCurrentLine(prompt);
      this.inputField.val('');
      this.currentLine.append(this.inputField);
      this.inputField.focus();
      return this.inputField.unbind('change').change((function(_this) {
        return function() {
          var text;
          text = _this.inputField.val();
          _this.inputField.remove();
          _this._addToCurrentLine(text, 'text-info');
          _this._createNewLine();
          return callback(text);
        };
      })(this));
    };

    InteractiveConsole.prototype._createNewLine = function(classes) {
      var $console;
      this.currentLine = $('<div class="line"></div>');
      if (classes) {
        this.currentLine.addClass(classes);
      }
      this.console_content.append(this.currentLine);
      $console = $('#console');
      return $console.scrollTop($console[0].scrollHeight);
    };

    InteractiveConsole.prototype._addToCurrentLine = function(text, classes) {
      var newSpan;
      if (classes) {
        newSpan = $("<span class=\"" + classes + "\"></span>").text(text);
        return this.currentLine.append(newSpan);
      } else {
        return this.currentLine.append($('<div/>').text(text).html());
      }
    };

    return InteractiveConsole;

  })();

  window.CodeController = CodeController;

  window.InteractiveConsole = InteractiveConsole;

  $(function() {
    var adjustCodeTop, overlay;
    window.codeController = new CodeController({
      $codearea: $('#codearea'),
      consoleWrapper: $('#console'),
      workspace: $('#workspace'),
      resizeBar: $("#console-resize-bar"),
      console_content: $("#console-content")
    });
    overlay = $('#code-loading-overlay');
    overlay.css('line-height', (overlay.height()) + "px");
    adjustCodeTop = function() {
      var actionTop, codeTop;
      codeTop = $('#flashbar').height() + 35;
      actionTop = codeTop + 45;
      $('#code-area').css('top', codeTop + "px");
      $('#save-bar').css('top', codeTop + "px");
      return $('#action-bar').css('top', actionTop + "px");
    };
    $('#flashbar .flash').on('hidden', adjustCodeTop);
    return adjustCodeTop();
  });

}).call(this);

// Generated by CoffeeScript 1.12.4
(function() {
  var ColorPicker;

  ColorPicker = (function() {
    function ColorPicker(options) {
      this.canvas = document.getElementById(options.canvasId);
      this.canvas.width = this.width;
      this.canvas.height = this.height;
      this.ctx = this.canvas.getContext('2d');
      this.redElt = $('#' + options.redId);
      this.greenElt = $('#' + options.greenId);
      this.blueElt = $('#' + options.blueId);
      this.swatchElt = $('#' + options.swatchId);
      this.colorpicker = $('#' + options.widgetId);
      this.okElt = $('#' + options.okId);
      this.cancelElt = $('#' + options.cancelId);
      this.closeElt = $('.' + options.closeClass, this.colorpicker);
      this.colorFields = $('.' + options.colorClass);
      this.fillColors();
      this.initializeSidebar();
      this.attachEventHandlers();
    }

    ColorPicker.prototype.width = 360;

    ColorPicker.prototype.height = 360;

    ColorPicker.prototype.initializeSidebar = function() {
      this.redElt.val(0);
      this.greenElt.val(0);
      return this.blueElt.val(0);
    };

    ColorPicker.prototype.hue2rgb = function(p, q, t) {
      if (t < 0) {
        t += 1;
      } else if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        p = p + (q - p) * 6 * t;
      } else if (t < 1 / 2) {
        p = q;
      } else if (t < 2 / 3) {
        p = p + (q - p) * (2 / 3 - t) * 6;
      }
      return p;
    };

    ColorPicker.prototype.hsl2rgb = function(h, s, l) {
      var b, g, hp, p, q, r;
      if (s === 0) {
        r = g = b = l;
      } else {
        q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        p = 2 * l - q;
        hp = h / 360;
        r = this.hue2rgb(p, q, hp + 1 / 3);
        g = this.hue2rgb(p, q, hp);
        b = this.hue2rgb(p, q, hp - 1 / 3);
      }
      return [r * 255, g * 255, b * 255];
    };

    ColorPicker.prototype.fillColors = function() {
      var h, i, idx, imageData, j, l, ref, ref1, rgb, s, x, y;
      imageData = this.ctx.getImageData(0, 0, this.width, this.height);
      for (y = i = 0, ref = this.height; 0 <= ref ? i <= ref : i >= ref; y = 0 <= ref ? ++i : --i) {
        for (x = j = 0, ref1 = this.width; 0 <= ref1 ? j <= ref1 : j >= ref1; x = 0 <= ref1 ? ++j : --j) {
          h = x;
          s = 1;
          l = y / this.height;
          rgb = this.hsl2rgb(h, s, l);
          idx = y * this.width * 4 + x * 4;
          imageData.data[idx] = rgb[0];
          imageData.data[idx + 1] = rgb[1];
          imageData.data[idx + 2] = rgb[2];
          imageData.data[idx + 3] = 255;
        }
      }
      return this.ctx.putImageData(imageData, 0, 0);
    };

    ColorPicker.prototype.updateColor = function(r, g, b) {
      this.redElt.val(r);
      this.greenElt.val(g);
      this.blueElt.val(b);
      return this.swatchElt.css('background-color', 'rgb(' + r + ',' + g + ',' + b + ')');
    };

    ColorPicker.prototype.handleDrag = function(e) {
      var b, g, hue, lit, r, rgb;
      hue = e.offsetX;
      lit = e.offsetY / $(this.canvas).height();
      rgb = this.hsl2rgb(hue, 1, lit);
      r = Math.floor(rgb[0]);
      g = Math.floor(rgb[1]);
      b = Math.floor(rgb[2]);
      return this.updateColor(r, g, b);
    };

    ColorPicker.prototype.attachEventHandlers = function() {
      $(this.canvas).on('mousedown', (function(_this) {
        return function(e) {
          $(_this.canvas).on('mousemove', function(e) {
            return _this.handleDrag(e);
          });
          return _this.handleDrag(e);
        };
      })(this));
      $(this.canvas).on('mouseup', (function(_this) {
        return function(e) {
          return $(_this.canvas).off('mousemove');
        };
      })(this));
      return this.immediateChange(this.colorFields, (function(_this) {
        return function() {
          var b, g, r;
          r = parseInt(_this.redElt.val(), 10);
          g = parseInt(_this.greenElt.val(), 10);
          b = parseInt(_this.blueElt.val(), 10);
          return _this.updateColor(r, g, b);
        };
      })(this));
    };

    ColorPicker.prototype.show = function(callback) {
      this.colorpicker.modal('show');
      this.okElt.on('click', (function(_this) {
        return function(e) {
          var b, g, r;
          r = parseInt(_this.redElt.val(), 10);
          g = parseInt(_this.greenElt.val(), 10);
          b = parseInt(_this.blueElt.val(), 10);
          _this.okElt.off('click');
          _this.cancelElt.off('click');
          _this.closeElt.off('click');
          return callback(r, g, b);
        };
      })(this));
      this.cancelElt.on('click', (function(_this) {
        return function(e) {
          _this.okElt.off('click');
          _this.cancelElt.off('click');
          _this.closeElt.off('click');
          return callback(0, 0, 0);
        };
      })(this));
      return this.closeElt.on('click', (function(_this) {
        return function(e) {
          _this.okElt.off('click');
          _this.cancelElt.off('click');
          _this.closeElt.off('click');
          return callback(0, 0, 0);
        };
      })(this));
    };

    ColorPicker.prototype.immediateChange = function(selector, callback) {
      return selector.each(function() {
        var $this;
        $this = $(this);
        $this.data('oldVal', $this);
        return $this.bind('propertychange keyup input cut paste', function(e) {
          var val;
          val = $this.val();
          if ($this.data('oldVal') !== val) {
            $this.data('oldVal', val);
            return callback(val);
          }
        });
      });
    };

    return ColorPicker;

  })();

  addEventListener('load', function() {
    return window.pythy.colorPicker = new ColorPicker({
      canvasId: 'mediacomp-colorpicker-canvas',
      redId: 'mediacomp-color-red',
      greenId: 'mediacomp-color-green',
      blueId: 'mediacomp-color-blue',
      swatchId: 'mediacomp-color-swatch',
      widgetId: 'mediacomp-colorpicker',
      okId: 'mediacomp-colorpicker-ok',
      cancelId: 'mediacomp-colorpicker-cancel',
      colorClass: 'mediacomp-color-field',
      closeClass: 'close'
    });
  });

}).call(this);
